#lang racket
(require racket/match)

(provide (all-defined-out))

(define ITEMS 5)

;; C1, C2, C3, C4 sunt case într-un supermarket.
;; C1 acceptă doar clienți care au cumparat maxim ITEMS produse (ITEMS este definit mai sus).
;; C2 - C4 nu au restricții.
;; Considerăm că procesarea fiecărui produs la casă durează un minut.
;; Casele pot suferi întarzieri (delay).
;; La un moment dat, la fiecare casă există 0 sau mai mulți clienți care stau la coadă.
;; Timpul total (tt) al unei case reprezintă timpul de procesare al celor aflați la coadă,
;; adică numărul de produse cumpărate de ei + întârzierile suferite de casa respectivă (dacă există).
;; Ex:
;; la C3 sunt Ana cu 3 produse și Geo cu 7 produse,
;; și C3 nu are întârzieri => tt pentru C3 este 10.


; Definim o structură care descrie o casă prin:
; - index (de la 1 la 4)
; - tt (timpul total descris mai sus)
; - queue (coada cu persoanele care așteaptă)
(define-struct counter (index tt queue) #:transparent)


; TODO
; Implementați o functie care intoarce o structură counter goală.
; tt este 0 si coada este vidă.
; Obs: la definirea structurii counter se creează automat o funcție make-counter pentru a construi date de acest tip
(define (empty-counter index)
  (make-counter index 0 '()))


; TODO
; Implementați o funcție care crește tt-ul unei case cu un număr dat de minute.
(define (tt+ C minutes)
  (match C
    [(counter index tt queue)
     (= (counter-tt C) tt) (make-counter index (+ tt minutes) queue)]))


; TODO
; Implementați o funcție care primește o listă de case și intoarce o pereche dintre:
; - indexul casei (din listă) care are cel mai mic tt
; - tt-ul acesteia
; Obs: când mai multe case au același tt, este preferată casa cu indexul cel mai mic
(define max-tt 9999999999999)
(define counter-id 0)
(define last-idx -1)
(define Backup (make-counter 3 10 '((ion . 15))))
(define ok 1)

(define (minimum-counter C1 C2)
  (cond
    ((< (counter-index C1) (counter-index C2)) C1)
    (else C2)))


(define (min-tt counters)
  (cond
    ((null? counters) (cons counter-id max-tt))
    ((equal? ok 1) (and (set! ok 0) (set! Backup (struct-copy counter (car counters)))
                        (set! counter-id (counter-index (car counters)))
                        (set! max-tt (counter-tt (car counters)))
                        (min-tt (cdr counters))))
    ((equal? (counter-tt (car counters)) (counter-tt Backup)) (and (set! max-tt (counter-tt (minimum-counter (car counters) Backup)))
                                                                   (set! counter-id (counter-index (minimum-counter (car counters) Backup)))
                                                                   (set! Backup (struct-copy counter (minimum-counter (car counters) Backup)))
                                                                   (min-tt (cdr counters))))
    ((< (counter-tt (car counters)) max-tt) (and (set! max-tt (counter-tt (car counters)))
                                                              (set! counter-id (counter-index (car counters)))
                                                              (set! Backup (struct-copy counter (car counters)))
                                                              (min-tt (cdr counters))))
    (else (min-tt (cdr counters)))
    ))

;(define (min-tt counters)
 ;(cond
   ;((null? counters) (cons counter-id max-tt))
   ;((< (counter-tt (car counters)) max-tt) (and (set! max-tt (counter-tt (car counters)))
                                                ;(set! counter-id (counter-index (car counters)))
                                                ;(set! Backup (struct-copy counter (car counters)))(min-tt (cdr counters))))
   ;((= (counter-tt (car counters)) max-tt) (and (set! max-tt (counter-tt (minimum-counter (car counters) Backup)))
                                                ;(set! counter-id (counter-index (minimum-counter (car counters) Backup)))
                                                ;(min-tt (cdr counters))))
   
   ;(else (min-tt (cdr counters)))
   ;))


; TODO
; Implementați o funcție care adaugă o persoană la o casă.
; C = casa, name = numele persoanei, n-items = numărul de produse cumpărate
; Veți întoarce o nouă structură obținută prin așezarea perechii (name . n-items)
; la sfârșitul cozii de așteptare.
(define (add-to-counter C name n-items)
  (make-counter (counter-index C) (+ (counter-tt C) n-items) (append (counter-queue C) (list (cons name n-items)))))

(define count 0)

(define (replicate n L)
  (cond
    ((null? L) '())
    ((equal? n 0) L)
    ((< count n) (and (append (list (car L)) (list (car L)) (cdr L)))) (set! count (+ count 1)))
    (else (replicate n (cdr L)))
  )


; TODO
; Implementați funcția care simulează fluxul clienților pe la case.
; requests = listă de cereri care pot fi de 2 tipuri:
; - (<name> <n-items>) - persoana <name> trebuie așezată la coadă la o casă
; - (delay <index> <minutes>) - casa <index> este întârziată cu <minutes> minute
; C1, C2, C3, C4 = structuri corespunzătoare celor 4 case
; Sistemul trebuie să proceseze aceste cereri în ordine, astfel:
; - persoanele vor fi distribuite la casele cu tt minim (dintre casele la care au voie)
; - când o casă suferă o întârziere, tt-ul ei crește
(define (serve requests C1 C2 C3 C4)

  ; puteți să vă definiți aici funcții ajutătoare (define în define)
  ; - avantaj: aveți acces la variabilele requests, C1, C2, C3, C4 fără a le retrimite ca parametri
  ; puteți de asemenea să vă definiți funcțiile ajutătoare în exteriorul lui "serve"
  ; - avantaj: puteți să vă testați fiecare funcție imediat ce ați implementat-o

  (if (null? requests)
      (list C1 C2 C3 C4)
      (match (car requests)
        [(list 'delay index minutes) 'your-code-here]
        [(list name n-items)         'your-code-here])))
